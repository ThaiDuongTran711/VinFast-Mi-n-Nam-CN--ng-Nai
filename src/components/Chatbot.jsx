import React, { useState, useEffect, useRef } from "react";
import "./Chatbot.css";
import { serviceVehicles, familyVehicles } from "../data/vehicles";

export default function Chatbot() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [open, setOpen] = useState(false);
  const [lastVehicle, setLastVehicle] = useState(null);

  const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
  const hasRun = useRef(false);

  const allVehicles = [...serviceVehicles, ...familyVehicles];

  // Intro messages
  useEffect(() => {
    if (hasRun.current) return;
    hasRun.current = true;

    const introMessages = [
      "Xin ch√†o qu√Ω kh√°ch",
      "Em l√† Ph∆∞·ªõc L·ªôc t∆∞ v·∫•n vi√™n VinFast (03333.760.51)",
      "Qu√Ω kh√°ch ƒëang quan t√¢m m·∫´u xe n√†o ·∫°",
    ];

    introMessages.forEach((text, index) => {
      setTimeout(() => {
        setMessages((prev) => [...prev, { sender: "bot", typing: true }]);
      }, index * 4000);

      setTimeout(() => {
        setMessages((prev) => {
          const copy = [...prev];
          copy[copy.length - 1] = { sender: "bot", text };
          return copy;
        });
      }, index * 4000 + 2000);
    });
  }, []);

  const sendMessage = async () => {
    if (!input.trim()) return;

    const userMsg = { sender: "user", text: input };
    setMessages((prev) => [...prev, userMsg]);
    setInput("");
    setLoading(true);

    let finalInput = input;

    // N·∫øu user h·ªèi "chi ti·∫øt / c√≤n g√¨ / th√™m" m√† kh√¥ng nh·∫Øc t√™n xe ‚Üí th√™m context
    if (/chi ti·∫øt|c√≤n g√¨|th√™m/.test(input.toLowerCase()) && lastVehicle) {
      finalInput = `Ng∆∞·ªùi d√πng ƒëang h·ªèi th√™m chi ti·∫øt v·ªÅ ${lastVehicle.name}.
C√¢u h·ªèi g·ªëc: "${input}".
Vui l√≤ng tr·∫£ l·ªùi li√™n quan ƒë·∫øn ${lastVehicle.name}.`;
    }

    // N·∫øu user nh·∫Øc ƒë·∫øn t√™n xe ‚Üí l∆∞u l·∫°i
    const foundVehicle = allVehicles.find((v) =>
      input.toLowerCase().includes(v.name.toLowerCase())
    );
    if (foundVehicle) {
      setLastVehicle(foundVehicle);
    }

    // Chu·∫©n b·ªã d·ªØ li·ªáu xe cho Gemini
    const carInfo = allVehicles
      .map(
        (car) =>
          `${car.name} - ${car.price} - T·∫ßm ho·∫°t ƒë·ªông: ${car.range} - ${car.description}`
      )
      .join("\n");

    try {
      const response = await fetch(
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=" +
          apiKey,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  {
                    text: `
B·∫°n l√† Ph∆∞·ªõc L·ªôc t∆∞ v·∫•n vi√™n xe VinFast, ch·ªâ gi·ªüi thi·ªáu 1 l·∫ßn, ƒë·ª´ng gi·ªõi thi·ªáu nhi·ªÅu l·∫ßn. 
D√πng danh x∆∞ng l√† em, kh√¥ng ƒë∆∞·ª£c x∆∞ng t√¥i.
Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu d∆∞·ªõi ƒë√¢y ƒë·ªÉ t∆∞ v·∫•n cho kh√°ch h√†ng, kh√¥ng ƒë∆∞·ª£c b·ªãa th√™m.

Danh s√°ch xe VinFast:
${carInfo}

C√¢u h·ªèi: ${finalInput}
                    `,
                  },
                ],
              },
            ],
          }),
        }
      );

      const data = await response.json();
      const botReply =
        data?.candidates?.[0]?.content?.parts?.[0]?.text ||
        "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu ƒë∆∞·ª£c c√¢u h·ªèi n√†y üò¢";

      setMessages((prev) => [...prev, { sender: "bot", text: botReply }]);
    } catch (error) {
      console.error("Gemini API error:", error);
      setMessages((prev) => [
        ...prev,
        { sender: "bot", text: "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi g·ªçi API." },
      ]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <button className="chat-toggle-btn" onClick={() => setOpen(!open)}>
        üí¨
      </button>

      {open && (
        <div className="chatbox">
          <div className="chat-messages">
            {messages.map((msg, i) => (
              <div key={i} className={`chat-message ${msg.sender}`}>
                {msg.sender === "bot" && <img src="public/images/avatar.jpg" className="avatar"></img>}
                <div className="bubble">
                  {msg.typing ? (
                    <span className="typing">
                      <span></span><span></span><span></span>
                    </span>
                  ) : (
                    msg.text
                  )}
                </div>
              </div>
            ))}
            {loading && (
              <div className="chat-message bot">
                <img src="public/images/avatar.jpg" className="avatar"></img>
                <div className="bubble typing">
                  <span></span><span></span><span></span>
                </div>
              </div>
            )}
          </div>
          <div className="chat-input">
            <input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              onKeyDown={(e) => e.key === "Enter" && sendMessage()}
            />
            <button onClick={sendMessage}>G·ª≠i</button>
          </div>
        </div>
      )}
    </>
  );
}
