import React, { useState } from "react";
import "./Chatbot.css";
import { serviceVehicles, familyVehicles } from "../data/vehicles"; // ch·ªânh path cho ƒë√∫ng

export default function Chatbot() {
  const [messages, setMessages] = useState([
    { sender: "bot", text: "Xin ch√†o üëã! M√¨nh l√† chatbot VinFast, b·∫°n mu·ªën t√¨m hi·ªÉu d√≤ng xe n√†o?" }
  ]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [open, setOpen] = useState(false);

  const apiKey = import.meta.env.VITE_GEMINI_API_KEY;

  const sendMessage = async () => {
    if (!input.trim()) return;

    const newMessages = [...messages, { sender: "user", text: input }];
    setMessages(newMessages);
    setInput("");
    setLoading(true);

    // G·ªôp d·ªØ li·ªáu t·ª´ serviceVehicles + familyVehicles
    const allCars = [...serviceVehicles, ...familyVehicles];

    // Chuy·ªÉn th√†nh text ng·∫Øn g·ªçn cho bot
    const carInfo = allCars
      .map(
        car =>
          `${car.name} - ${car.price} - T·∫ßm ho·∫°t ƒë·ªông: ${car.range} - ${car.description}`
      )
      .join("\n");

    try {
      const response = await fetch(
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=" + apiKey,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  {
                    text: `
B·∫°n l√† chatbot t∆∞ v·∫•n xe VinFast. 
Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu d∆∞·ªõi ƒë√¢y ƒë·ªÉ t∆∞ v·∫•n cho kh√°ch h√†ng, kh√¥ng ƒë∆∞·ª£c b·ªãa th√™m.

Danh s√°ch xe VinFast:
${carInfo}

N·∫øu kh√°ch h·ªèi v·ªÅ h√£ng xe kh√°c, h√£y tr·∫£ l·ªùi: "Xin l·ªói, m√¨nh ch·ªâ t∆∞ v·∫•n v·ªÅ xe VinFast."

Kh√°ch: ${input}
                    `
                  }
                ]
              }
            ]
          }),
        }
      );

      const data = await response.json();
      const botReply =
        data?.candidates?.[0]?.content?.parts?.[0]?.text ||
        "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu ƒë∆∞·ª£c c√¢u h·ªèi n√†y üò¢";

      setMessages([...newMessages, { sender: "bot", text: botReply }]);
    } catch (error) {
      console.error("Gemini API error:", error);
      setMessages([...newMessages, { sender: "bot", text: "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi g·ªçi API." }]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      {/* N√∫t m·ªü chat */}
      <button className="chat-toggle-btn" onClick={() => setOpen(!open)}>
        üí¨
      </button>

      {/* Khung chat */}
      {open && (
        <div className="chatbox">
          <div className="chat-messages">
            {messages.map((msg, i) => (
              <div key={i} className={`chat-message ${msg.sender}`}>
                {msg.sender === "bot" && <span className="avatar">ü§ñ</span>}
                <div className="bubble">{msg.text}</div>
              </div>
            ))}
            {loading && (
              <div className="chat-message bot">
                <span className="avatar">ü§ñ</span>
                <div className="bubble typing">
                  <span></span><span></span><span></span>
                </div>
              </div>
            )}
          </div>
          <div className="chat-input">
            <input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              onKeyDown={(e) => e.key === "Enter" && sendMessage()}
            />
            <button onClick={sendMessage}>G·ª≠i</button>
          </div>
        </div>
      )}
    </>
  );
}
